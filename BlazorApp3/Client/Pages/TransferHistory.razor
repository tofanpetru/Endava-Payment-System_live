@page "/transfer/history"

@inject HttpClient HttpClient

@attribute [Authorize]

<style>
    /* Pagination links */
    .pagination a {
        color: black;
        float: left;
        padding: 8px 16px;
        text-decoration: none;
        transition: background-color .3s;
    }

    /* Style the active/current link */
    .pagination a.active {
        background-color: dodgerblue;
        color: white;
    }

    /* Add a grey background color on mouse-over */
    .pagination a:hover:not(.active) {background-color: #ddd;}
</style>

<h3>Transfer History</h3>
<td>
    <button class="btn @(direction == Direction.Inbound ? "btn-secondary" : " btn-outline-secondary")"
            @onclick="() => ChangeDirection(Direction.Inbound)">
        Inbound
    </button>
</td>
<td>
    <button class="btn @(direction == Direction.Outbound ? "btn-secondary" : " btn-outline-secondary")"
            @onclick="() => ChangeDirection(Direction.Outbound)">
        Outbound
    </button>
</td>

@if (transactionsData?.Transactions == null && WalletList == null)
{
    <div>Loading...</div>
}
else
{    <table class="table table-striped">
        <thead>
            <tr>
                <td><strong>Id transaction</strong></td>
                <td><strong>Date</strong></td>
                <td><strong>Status:</strong></td>
                <td><strong>Amount</strong></td>
                <td><strong>DestinationWalletId</strong></td>
                <td><strong>SourceWalletId</strong></td>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in transactionsData.Transactions)
            {
                <tr>
                    <td>@transaction.Id</td>
                    <td>@transaction.Date</td>
                    @foreach (var wallet in WalletList)
                    {
                            @if (wallet.Id == transaction.SourceWalletId && wallet.Id != transaction.DestinationWalletId)
                            {
                                status = "Trimis";
                            }
                            else
                            {
                                status = "Primit";
                            }
                    }
                    <td>@status</td>
                    <td>@transaction.Amount</td>
                    <td class="small">@Convert.ToString(transaction.DestinationWalletId).Substring(0, 6)@string.Concat(Enumerable.Repeat("**", 15))</td>
                    <td class="small">@Convert.ToString(transaction.SourceWalletId).Substring(0, 6)@string.Concat(Enumerable.Repeat("**", 15))</td>
                </tr>
            }
        </tbody>
    </table>

    <div class="pagination">
        <a @onclick="() => LoadTransactions(Math.Clamp(pageNumber - 1, 1, CalculatePageCount()))">&laquo;</a>
        @for (int i = Math.Clamp(pageNumber - 2, 1, CalculatePageCount()); i <= Math.Clamp(pageNumber + 2, 1, CalculatePageCount()); i++)
        {
            var pn = i;
            <a class="@(pn == pageNumber ? "active" : "")" @onclick="() => LoadTransactions(pn)">@pn</a>
        }
        <a @onclick="() => LoadTransactions(Math.Clamp(pageNumber + 1, 1, CalculatePageCount()))">&raquo;</a>
    </div>
}

@code {

    private TransactionsHistoryData transactionsData;

    private int pageNumber = 1;
    private int itemsPerPage = 5; //max 5 tranzactii pe pagina

    private Direction direction;
    public string status;

    private List<Wallet> WalletList;

    protected override async Task OnInitializedAsync()
    {
        await LoadTransactions(pageNumber);
        await LoadWallets();
    }

    private async Task LoadWallets()
    {
        try
        {
            WalletList = await HttpClient.GetFromJsonAsync<List<Wallet>>("api/wallet");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task LoadTransactions(int pNam)
    {
        try
        {
            transactionsData = await HttpClient.GetFromJsonAsync<TransactionsHistoryData>($"api/wallet/transfers/{itemsPerPage}/{pNam}?direction={direction}");
            pageNumber = pNam;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private int CalculatePageCount()
    {
        return (int)Math.Ceiling((double)transactionsData.ItemCount / itemsPerPage);
    }

    private async Task ChangeDirection(Direction dir)
    {
        direction = dir == direction ? Direction.DefaultDirection : dir;
        await LoadTransactions(pageNumber);
    }
}
